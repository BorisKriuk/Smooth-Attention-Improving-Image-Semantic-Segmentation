# -*- coding: utf-8 -*-
"""Viz_Smooth_Att_0.4+FSSD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J8xnQF38hGcfv0FfmtnxuC9nN98fC09Y
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.optim.lr_scheduler import ReduceLROnPlateau
from torchvision import models, transforms
from torch.utils.data import Dataset, DataLoader
from PIL import Image
import os
import pandas as pd
import numpy as np

# google drive mount
from google.colab import drive
drive.mount('/content/drive')

!unzip '/content/drive/MyDrive/Smooth Attention/input/FSSD.zip'

# Constants
BATCH_SIZE = 8
NUM_EPOCHS = 20
LEARNING_RATE = 0.0001

class FSSD(Dataset):
    def __init__(self, root_dir, split, transform=None):
        self.root_dir = root_dir
        self.split = split
        self.transform = transform
        self.images = []
        self.masks = []

        image_dir = os.path.join(root_dir, split, 'images')
        mask_dir = os.path.join(root_dir, split, 'labels')

        for file in os.listdir(image_dir):
            if file.endswith('.png'):
                image_path = os.path.join(image_dir, file)
                mask_path = os.path.join(mask_dir, file)
                if os.path.exists(mask_path):
                    self.images.append(image_path)
                    self.masks.append(mask_path)

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        img_path = self.images[idx]
        mask_path = self.masks[idx]

        image = Image.open(img_path).convert("RGB")
        mask = Image.open(mask_path).convert("L")

        if self.transform:
            image = self.transform(image)
            mask = self.transform(mask)

        return image, mask

# Data preprocessing
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor()
])

# Create datasets
train_dataset = FSSD(
    root_dir='/content/dataset',
    split='train',
    transform=transform
)

val_dataset = FSSD(
    root_dir='/content/dataset',
    split='val',
    transform=transform
)

train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False)

class SmoothAttention(nn.Module):
    def __init__(self, in_channels, out_channels, threshold=0.4):
        super(SmoothAttention, self).__init__()
        self.query = nn.Conv2d(in_channels, out_channels, kernel_size=1)
        self.key = nn.Conv2d(in_channels, out_channels, kernel_size=1)
        self.value = nn.Conv2d(in_channels, out_channels, kernel_size=1)
        self.gamma = nn.Parameter(torch.zeros(1))
        self.threshold = threshold

    def forward(self, x):
        batch_size, C, H, W = x.size()

        proj_query = self.query(x).view(batch_size, -1, H * W).permute(0, 2, 1)
        proj_key = self.key(x).view(batch_size, -1, H * W)
        energy = torch.bmm(proj_query, proj_key)
        attention = F.softmax(energy, dim=-1)

        attention_reshaped = attention.view(batch_size, H, W, H * W)
        attention_padded = F.pad(attention_reshaped, (0, 0, 1, 1, 1, 1), mode='replicate')

        chebyshev_distances = []
        for i in range(3):
            for j in range(3):
                if i == 1 and j == 1:
                    continue
                neighbor = attention_padded[:, i:i + H, j:j + W, :]
                distance = torch.max(torch.abs(neighbor - attention_reshaped), dim=-1)[0]
                chebyshev_distances.append(distance)

        chebyshev_distances = torch.stack(chebyshev_distances, dim=-1)
        max_chebyshev_distance = torch.max(chebyshev_distances, dim=-1)[0]

        smoothing_mask = (max_chebyshev_distance > self.threshold).float()

        smoothed_attention = torch.stack([
            attention_padded[:, i:i + H, j:j + W, :]
            for i in range(3) for j in range(3)
            if not (i == 1 and j == 1)
        ], dim=0).mean(dim=0)

        smoothing_mask = smoothing_mask.unsqueeze(-1).expand_as(attention_reshaped)

        final_attention = (1 - smoothing_mask) * attention_reshaped + smoothing_mask * smoothed_attention
        final_attention = final_attention.view(batch_size, H * W, H * W)

        proj_value = self.value(x).view(batch_size, -1, H * W)
        out = torch.bmm(proj_value, final_attention.permute(0, 2, 1))
        out = out.view(batch_size, C, H, W)

        out = self.gamma * out + x

        return out, final_attention  # Return both output and attention map

class SmoothAttentionUNet(nn.Module):
    def __init__(self, num_classes):
        super(SmoothAttentionUNet, self).__init__()
        self.encoder = models.resnet18(pretrained=True)
        self.encoder = nn.Sequential(*list(self.encoder.children())[:-2])
        self.smooth_attention = SmoothAttention(512, 512)
        self.decoder = nn.Sequential(
            nn.ConvTranspose2d(512, 256, kernel_size=2, stride=2),
            nn.ReLU(inplace=True),
            nn.ConvTranspose2d(256, 128, kernel_size=2, stride=2),
            nn.ReLU(inplace=True),
            nn.ConvTranspose2d(128, 64, kernel_size=2, stride=2),
            nn.ReLU(inplace=True),
            nn.ConvTranspose2d(64, 32, kernel_size=2, stride=2),
            nn.ReLU(inplace=True),
            nn.ConvTranspose2d(32, num_classes, kernel_size=2, stride=2)
        )

    def forward(self, x):
        x = self.encoder(x)
        x, attention_map = self.smooth_attention(x)  # Capture the attention map
        x = self.decoder(x)
        return x, attention_map  # Return both output and attention map

# Create the model and move it to the device
num_classes = 1  # Binary segmentation (background vs bird)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = SmoothAttentionUNet(num_classes=num_classes).to(device)

# Print model summary
print(model)

# Verify model is on the correct device
print(f"Model is on device: {next(model.parameters()).device}")

criterion = nn.BCEWithLogitsLoss()
optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)
scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=5, verbose=True)

import torch
import torch.nn.functional as F
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

def compute_iou(pred, target):
    intersection = torch.logical_and(pred, target).float().sum((1, 2))
    union = torch.logical_or(pred, target).float().sum((1, 2))
    iou = (intersection + 1e-6) / (union + 1e-6)
    return iou.mean().item()

def compute_dice(pred, target):
    intersection = torch.logical_and(pred, target).float().sum((1, 2))
    dice = (2. * intersection + 1e-6) / (pred.float().sum((1, 2)) + target.float().sum((1, 2)) + 1e-6)
    return dice.mean().item()

def compute_metrics(pred, target):
    pred_flat = pred.view(-1).cpu().numpy()
    target_flat = target.view(-1).cpu().numpy()

    acc = accuracy_score(target_flat, pred_flat)
    precision = precision_score(target_flat, pred_flat)
    recall = recall_score(target_flat, pred_flat)
    f1 = f1_score(target_flat, pred_flat)

    return acc, precision, recall, f1

from torchvision.transforms.functional import resize

def train(model, train_loader, criterion, optimizer, device):
    model.train()
    running_loss = 0.0

    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)

        optimizer.zero_grad()

        # The model returns a tuple (output, attention_map), so we need to unpack it
        outputs, _ = model(inputs)

        # Calculate the loss using only the output
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

    epoch_loss = running_loss / len(train_loader)
    return epoch_loss

def compute_metrics(pred, target):
    pred_flat = pred.view(-1).cpu().numpy()
    target_flat = target.view(-1).cpu().numpy()

    acc = accuracy_score(target_flat, pred_flat)
    precision = precision_score(target_flat, pred_flat, zero_division=0)
    recall = recall_score(target_flat, pred_flat, zero_division=0)
    f1 = f1_score(target_flat, pred_flat, zero_division=0)

    return acc, precision, recall, f1

def evaluate(model, loader, device):
    model.eval()
    iou_list = []
    dice_list = []
    accuracy_list = []
    precision_list = []
    recall_list = []
    f1_list = []

    with torch.no_grad():
        for data in loader:
            inputs, targets = data
            inputs, targets = inputs.to(device), targets.to(device)

            # The model returns a tuple (output, attention_map), so we need to unpack it
            outputs, _ = model(inputs)

            # Convert to binary mask
            preds = torch.sigmoid(outputs) > 0.5

            iou = compute_iou(preds, targets)
            dice = compute_dice(preds, targets)
            acc, precision, recall, f1 = compute_metrics(preds.int(), targets.int())  # Ensure binary masks

            iou_list.append(iou)
            dice_list.append(dice)
            accuracy_list.append(acc)
            precision_list.append(precision)
            recall_list.append(recall)
            f1_list.append(f1)

    avg_iou = sum(iou_list) / len(iou_list)
    avg_dice = sum(dice_list) / len(dice_list)
    avg_accuracy = sum(accuracy_list) / len(accuracy_list)
    avg_precision = sum(precision_list) / len(precision_list)
    avg_recall = sum(recall_list) / len(recall_list)
    avg_f1 = sum(f1_list) / len(f1_list)

    return avg_iou, avg_dice, avg_accuracy, avg_precision, avg_recall, avg_f1

best_metric = float('-inf')
for epoch in range(NUM_EPOCHS):
    train_loss = train(model, train_loader, criterion, optimizer, device)
    test_metrics = evaluate(model, val_loader, device)

    # Unpack the metrics returned by the evaluate function
    avg_iou, avg_dice, avg_accuracy, avg_precision, avg_recall, avg_f1 = test_metrics

    # Since the evaluate function does not return the test loss, use avg_iou or other metrics for comparison
    if avg_iou > best_metric:
        best_metric = avg_iou
        torch.save(model.state_dict(), 'best_model.pth')

    print(f'Epoch {epoch+1}/{NUM_EPOCHS}, Train Loss: {train_loss:.4f}, Test IoU: {avg_iou:.4f}, Test Dice: {avg_dice:.4f}, Test Accuracy: {avg_accuracy:.4f}, Test Precision: {avg_precision:.4f}, Test Recall: {avg_recall:.4f}, Test F1: {avg_f1:.4f}')

import matplotlib.pyplot as plt
import seaborn as sns

def visualize_attention_map(attention_map, idx=0):
    """
    Visualizes the attention map as a heatmap.

    Parameters:
        attention_map (torch.Tensor): Attention map tensor with shape (H*W, H*W).
        idx (int): Index of the sample to visualize (for batch processing).
    """
    attention_map = attention_map[idx].detach().cpu().numpy()  # Convert to numpy
    attention_map = attention_map.reshape(int(np.sqrt(attention_map.shape[0])), -1)  # Reshape for heatmap

    plt.figure(figsize=(10, 10))
    sns.heatmap(attention_map, cmap='viridis')
    plt.title("Attention Map as Heatmap")
    plt.show()

# Example usage during evaluation
model.eval()
with torch.no_grad():
    for inputs, targets in val_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        outputs, attention_map = model(inputs)  # Get the attention map

        # Visualize the attention map for the first sample in the batch
        visualize_attention_map(attention_map, idx=0)

        # Compute metrics (optional, depending on your needs)
        preds = torch.sigmoid(outputs) > 0.5  # Convert to binary mask

        iou = compute_iou(preds, targets)
        dice = compute_dice(preds, targets)
        acc, precision, recall, f1 = compute_metrics(preds.int(), targets.int())  # Ensure binary masks

        print(f'IoU: {iou:.4f}, Dice: {dice:.4f}, Accuracy: {acc:.4f}, Precision: {precision:.4f}, Recall: {recall:.4f}, F1: {f1:.4f}')

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def visualize_attention_map_3d(attention_map, idx=0):
    """
    Visualizes the attention map as a 3D surface plot.

    Parameters:
        attention_map (torch.Tensor): Attention map tensor with shape (H*W, H*W).
        idx (int): Index of the sample to visualize (for batch processing).
    """
    attention_map = attention_map[idx].detach().cpu().numpy()  # Convert to numpy

    # Determine the dimensions
    size = int(np.sqrt(attention_map.size))  # If it's square
    if size * size != attention_map.size:  # If not square
        size = int(np.cbrt(attention_map.size))  # Assume it's cubic

    # Reshape accordingly
    attention_map = attention_map.reshape(size, size)

    x = np.linspace(0, size - 1, size)
    y = np.linspace(0, size - 1, size)
    x, y = np.meshgrid(x, y)

    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(111, projection='3d')
    ax.plot_surface(x, y, attention_map, cmap='viridis')

    ax.set_title("3D Attention Map")
    ax.set_xlabel("X-axis")
    ax.set_ylabel("Y-axis")
    ax.set_zlabel("Attention Value")
    plt.show()

# Example usage during evaluation
model.eval()
with torch.no_grad():
    for inputs, targets in val_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        outputs, attention_map = model(inputs)  # Get the attention map

        # Visualize the attention map in 3D for the first sample in the batch
        visualize_attention_map_3d(attention_map, idx=0)

        # Compute metrics (optional)
        preds = torch.sigmoid(outputs) > 0.5  # Convert to binary mask

        iou = compute_iou(preds, targets)
        dice = compute_dice(preds, targets)
        acc, precision, recall, f1 = compute_metrics(preds.int(), targets.int())

        print(f'IoU: {iou:.4f}, Dice: {dice:.4f}, Accuracy: {acc:.4f}, Precision: {precision:.4f}, Recall: {recall:.4f}, F1: {f1:.4f}')

import matplotlib.pyplot as plt

def visualize_two_images_and_masks(input_images, predicted_masks, true_masks=None):
    """
    Visualizes two input images, their predicted masks, and optionally the true masks.

    Parameters:
        input_images (torch.Tensor): The input images tensor with shape (2, 3, H, W).
        predicted_masks (torch.Tensor): The predicted masks tensor with shape (2, 1, H, W) or (2, H, W).
        true_masks (torch.Tensor, optional): The true masks tensor with shape (2, 1, H, W) or (2, H, W). If provided, it will be displayed.
    """
    fig, axs = plt.subplots(2, 3 if true_masks is not None else 2, figsize=(15, 10))

    for i in range(2):
        input_image = input_images[i].permute(1, 2, 0).cpu().numpy()  # Convert to HWC format
        predicted_mask = predicted_masks[i].squeeze().cpu().numpy()  # Convert to numpy and remove extra dimensions

        axs[i, 0].imshow(input_image)
        axs[i, 0].set_title(f'Input Image {i + 1}')
        axs[i, 0].axis('off')

        axs[i, 1].imshow(predicted_mask, cmap='gray')
        axs[i, 1].set_title(f'Predicted Mask {i + 1}')
        axs[i, 1].axis('off')

        if true_masks is not None:
            true_mask = true_masks[i].squeeze().cpu().numpy()
            axs[i, 2].imshow(true_mask, cmap='gray')
            axs[i, 2].set_title(f'True Mask {i + 1}')
            axs[i, 2].axis('off')

    plt.show()

# Example usage during evaluation
model.eval()
with torch.no_grad():
    for inputs, targets in val_loader:
        inputs, targets = inputs[:2].to(device), targets[:2].to(device)  # Take only the first 2 images and masks
        outputs, attention_map = model(inputs)  # Get the attention map

        # Convert to binary masks
        preds = torch.sigmoid(outputs) > 0.5

        # Visualize the two images and their corresponding predicted masks (and true masks if available)
        visualize_two_images_and_masks(inputs, preds, targets)

        # Compute metrics (optional)
        iou = compute_iou(preds, targets)
        dice = compute_dice(preds, targets)
        acc, precision, recall, f1 = compute_metrics(preds.int(), targets.int())

        print(f'IoU: {iou:.4f}, Dice: {dice:.4f}, Accuracy: {acc:.4f}, Precision: {precision:.4f}, Recall: {recall:.4f}, F1: {f1:.4f}')

def visualize_attention_cdf(attention_map, idx=0):
    """
    Visualizes the cumulative distribution function (CDF) of the attention map values.

    Parameters:
        attention_map (torch.Tensor): Attention map tensor.
        idx (int): Index of the sample to visualize (for batch processing).
    """
    attention_values = attention_map[idx].detach().cpu().numpy().flatten()
    sorted_values = np.sort(attention_values)
    cdf = np.arange(1, len(sorted_values) + 1) / len(sorted_values)

    plt.figure(figsize=(10, 6))
    plt.plot(sorted_values, cdf, marker='.', linestyle='none')
    plt.title("Cumulative Distribution Function of Attention Values")
    plt.xlabel("Attention Value")
    plt.ylabel("CDF")
    plt.grid()
    plt.show()

model.eval()
with torch.no_grad():
    for inputs, targets in val_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        outputs, attention_map = model(inputs)

        visualize_attention_cdf(attention_map, idx=0)

def visualize_attention_3d_scatter(attention_map, idx=0):
    """
    Visualizes a 3D scatter plot of attention map values.

    Parameters:
        attention_map (torch.Tensor): Attention map tensor.
        idx (int): Index of the sample to visualize (for batch processing).
    """
    attention_values = attention_map[idx].detach().cpu().numpy()
    size = int(np.sqrt(attention_values.size))  # Assuming it's square
    attention_values = attention_values.reshape(size, size)

    x = np.linspace(0, size - 1, size)
    y = np.linspace(0, size - 1, size)
    X, Y = np.meshgrid(x, y)
    Z = attention_values.flatten()

    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(X.flatten(), Y.flatten(), Z, c=Z, cmap='viridis', marker='o')

    ax.set_title("3D Scatter Plot of Attention Values")
    ax.set_xlabel("X-axis")
    ax.set_ylabel("Y-axis")
    ax.set_zlabel("Attention Value")
    plt.show()

def visualize_attention_3d_bar(attention_map, idx=0):
    """
    Visualizes a 3D bar plot of attention map values.

    Parameters:
        attention_map (torch.Tensor): Attention map tensor.
        idx (int): Index of the sample to visualize (for batch processing).
    """
    attention_values = attention_map[idx].detach().cpu().numpy()
    size = int(np.sqrt(attention_values.size))  # Assuming it's square
    attention_values = attention_values.reshape(size, size)

    x = np.arange(size)
    y = np.arange(size)
    X, Y = np.meshgrid(x, y)

    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(111, projection='3d')
    ax.bar3d(X.flatten(), Y.flatten(), np.zeros_like(attention_values.flatten()),
              dx=1, dy=1, dz=attention_values.flatten(), color='cyan', alpha=0.7)

    ax.set_title("3D Bar Plot of Attention Values")
    ax.set_xlabel("X-axis")
    ax.set_ylabel("Y-axis")
    ax.set_zlabel("Attention Value")
    plt.show()

def visualize_attention_3d_bubble(attention_map, idx=0):
    """
    Visualizes a 3D bubble plot of attention map values.

    Parameters:
        attention_map (torch.Tensor): Attention map tensor.
        idx (int): Index of the sample to visualize (for batch processing).
    """
    attention_values = attention_map[idx].detach().cpu().numpy()
    size = int(np.sqrt(attention_values.size))  # Assuming it's square
    attention_values = attention_values.reshape(size, size)

    x = np.linspace(0, size - 1, size)
    y = np.linspace(0, size - 1, size)
    X, Y = np.meshgrid(x, y)
    Z = attention_values.flatten()

    # Use the attention values for bubble sizes
    bubble_size = attention_values.flatten() * 100  # Scale for visualization

    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(X.flatten(), Y.flatten(), Z, s=bubble_size, c='blue', alpha=0.5)

    ax.set_title("3D Bubble Plot of Attention Values")
    ax.set_xlabel("X-axis")
    ax.set_ylabel("Y-axis")
    ax.set_zlabel("Attention Value")
    plt.show()

model.eval()
with torch.no_grad():
    for inputs, targets in val_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        outputs, attention_map = model(inputs)

        visualize_attention_3d_scatter(attention_map, idx=0)
        # or
        visualize_attention_3d_bar(attention_map, idx=0)
        # or
        visualize_attention_3d_bubble(attention_map, idx=0)

import numpy as np
import matplotlib.pyplot as plt

def create_attention_bubble_chart(input_image, attention_map, idx=0):
    """
    Creates an attention bubble chart based on the attention map.

    Parameters:
        input_image (torch.Tensor): The input image tensor (C, H, W).
        attention_map (torch.Tensor): Attention map tensor (H*W, H*W).
        idx (int): Index of the sample to visualize.
    """
    attention_map = attention_map[idx].detach().cpu().numpy()

    # Reshape attention map
    size = int(np.sqrt(attention_map.size))
    attention_map = attention_map.reshape(size, size)

    # Get the coordinates for the bubbles
    y_indices, x_indices = np.indices(attention_map.shape)

    # Flatten for plotting
    x = x_indices.flatten()
    y = y_indices.flatten()
    sizes = attention_map.flatten() * 1000  # Scale up for visibility

    # Create the bubble chart
    plt.figure(figsize=(10, 10))
    plt.scatter(x, y, s=sizes, c=sizes, cmap='viridis', alpha=0.6, edgecolors='w')
    plt.colorbar(label='Attention Values')
    plt.title("Attention Bubble Chart")
    plt.xlim(-1, size)
    plt.ylim(-1, size)
    plt.gca().invert_yaxis()  # Invert y-axis to match image coordinates
    plt.axis('off')
    plt.show()

# Example usage during evaluation
model.eval()
with torch.no_grad():
    for inputs, targets in val_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        outputs, attention_map = model(inputs)

        # Create attention bubble chart for the first sample
        create_attention_bubble_chart(inputs, attention_map, idx=0)